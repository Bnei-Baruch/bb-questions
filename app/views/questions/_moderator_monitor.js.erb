<script type="text/javascript">
    ModeratorLibrary = {};

    (function (ModeratorLibrary) {
        
        function flashInfoAimation(flashInfo, text){
            var html = '<div style="height: 21px;" class="inline-block" id="loading"><label>' + text + '</label><span>.</span><span>.</span><span>.</span></div>';
            flashInfo.html(html).show();
        }
        
        function flashInfoNotification(flashInfo, text){
            flashInfo.html(text).show();
            flashInfo.delay(500).fadeIn('normal', function() {
                flashInfo.delay(2500).fadeOut(function(){
                    flashInfo.text('');
                });
            });
        }
        
        ModeratorLibrary.onSubmitApproved = function (event) {
            var trgForm = $(event.target);
            var trgParentCont = trgForm.closest(".form-cont");
            var trgElm = trgForm.find("input.approve");
            var trgBtn = trgForm.find("button.approve");
            var flashInfo = trgParentCont.find(".flash-info");
    
            trgElm.click();
            flashInfoAimation(flashInfo, "<%= t('submitting') %>");
            event.preventDefault();
    
            $.ajax({
                type: 'POST',
                url: trgForm.attr('action'),
                data: trgForm.serialize(),
                dataType: 'json',
                success: function (json) {
                    if (json.approved) {
                        trgBtn.addClass("btn-info approved").removeClass("btn-primary").text("<%= t('questions.monitor.unapprove') %>");
                        flashInfoNotification(flashInfo, "<%= t('questions.monitor.approved') %>");
                    }
                    else {
                        trgBtn.addClass("btn-primary").removeClass("btn-info approved").text("<%= t('questions.monitor.approve') %>");
                        flashInfoNotification(flashInfo, "<%= t('questions.monitor.unapproved') %>");
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    writeError(flashInfo, jqXHR, textStatus, errorThrown);
                }
            })
            return false;
        }
        		
        function writeError(flashInfo, jqXHR, textStatus, errorThrown){
            var shortMessage = jqXHR.status + ' error Thrown: ' + errorThrown;
            
            if (flashInfo) flashInfo.html(shortMessage).prop('title', shortMessage);
            
            console.log('jqXHR:');
            console.log(jqXHR);
            console.log('textStatus:');
            console.log(textStatus);
            console.log('errorThrown:');
            console.log(errorThrown);
            
            alert('An error occurred... Look at the console (F12 or Ctrl+Shift+I, Console tab) for more information!');
        }
        
        
        ModeratorLibrary.onMessage = function (data) {
            if ($("#form-cont-" + data.id).length == 0){
                $.ajax({
                    url: "/questions/" + data.id + "/moderator_question"
                }).done(function(response) {
                    var htmlElement = $.parseHTML(response);
                    var newQuestion = $(htmlElement);
                    newQuestion.addClass("nq-added");
                    $("#unselected-questions-cont").prepend(newQuestion);
                    ModeratorLibrary.initUI($(newQuestion));
                    newQuestion.toggleClass( "new_question", 1000, "easeOutSine",  function(){
                        newQuestion.toggleClass( "new_question", 3000, "easeOutSine");
                    });
                    
                    
                });
            }
        };
        
        ModeratorLibrary.onSubmitTranslation = function (event) {
            var trgForm = $(event.target);
            var trgParentCont = trgForm.closest(".form-cont");
            var flashInfo = trgParentCont.find(".flash-info");
    
            flashInfoAimation(flashInfo, "<%= t('submitting') %>");
            event.preventDefault();
    
            $.ajax({
                type: 'POST',
                url: trgForm.attr('action'),
                data: trgForm.serialize(),
                dataType: 'json',
                success: function (json) {
                    flashInfoNotification(flashInfo, "<%= t('questions.monitor.saved') %>");
                    trgParentCont.find(".org-translation").text(trgParentCont.find(".question-translation").val()).removeClass("hide");
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    writeError(flashInfo, jqXHR, textStatus, errorThrown);
                }
            })
            return false;
        }
    
        ModeratorLibrary.onBtnEdit = function () {
            var curElm = $(this);
            var trgParentCont = curElm.closest(".form-cont");
            var questionId = trgParentCont.data("question-id");
            var trgElm = trgParentCont.find(".question-translation");
            trgElm.removeClass("hide").show();
    
            if (!trgElm.text().length) {
                trgElm.text(trgParentCont.find(".original-question").text());
            }
    
            trgParentCont.find(".btn.save").removeClass("hide").show();
            trgParentCont.find(".btn.cancel").removeClass("hide").show();
            curElm.hide();
        }

        
        ModeratorLibrary.questionBtnCancel = function () {
            var curElm = $(this);
            var trgParentCont = curElm.closest(".form-cont");
            trgParentCont.find(".btn.edit").show();
            trgParentCont.find(".btn.save").hide();
            trgParentCont.find(".btn.cancel").hide();
            trgParentCont.find(".question-translation").hide();
        }
        
        ModeratorLibrary.onBtnSave = function () {
            var curElm = $(this);
            var trgParentCont = curElm.closest(".form-cont");
            trgParentCont.find("form.form-translation").submit();
        }
       
        ModeratorLibrary.initUI = function (parentCont) {
            if (!parentCont){ 
                parentCont = $('#moderator-monitor');
                $('#btn-delete-all').click(ModeratorLibrary.onDeleteAll);
            }
            parentCont.find("form.edit_question.approve").submit(ModeratorLibrary.onSubmitApproved);
            parentCont.find("form.form-translation").submit(ModeratorLibrary.onSubmitTranslation);
            parentCont.find("button.edit").click(ModeratorLibrary.onBtnEdit);
            parentCont.find("button.cancel").click(ModeratorLibrary.questionBtnCancel);
            parentCont.find("button.save").click(ModeratorLibrary.onBtnSave);
            parentCont.find("button.select").click(ModeratorLibrary.onBtnSelect);
            ModeratorLibrary.initMessageDialog();
        }
        
        ModeratorLibrary.createWebsocket = function (parentCont) {
            var ws = Socket.createWebsocket();
        
            ws.onmessage = function(message) {
                var data;
                data = JSON.parse(message.data);
                ModeratorLibrary.onMessage(data);
            };
            
            return ws;
        }
        
        
        ModeratorLibrary.onDeleteAll = function (data) {
            $("#unselected-questions-cont").html('');
            $("#selected-questions-cont").html('');
            
            $.ajax({
                type: 'POST',
                url: "update_questions_session_date",
                error: function (jqXHR, textStatus, errorThrown) {
                    writeError(null, jqXHR, textStatus, errorThrown);
                }
            })
            return false;
        };
         
        ModeratorLibrary.onBtnSelect = function () {
            var trgForm = $(event.target).closest(".edit_question_select");
            var trgParentCont = trgForm.closest(".form-cont");
            var trgElm = trgForm.find("input.selected");
            var trgBtn = trgForm.find("button.select");
            var flashInfo = trgParentCont.find(".flash-info");
            
            trgElm.click();
            flashInfoAimation(flashInfo, "<%= t('submitting') %>");
            event.preventDefault();
            
            $.ajax({
                type: 'POST',
                url: trgForm.attr('action'),
                data: trgForm.serialize(),
                dataType: 'json',
                success: function (json) {
                    if (json.selected) {
                        trgBtn.addClass("btn-info selected").removeClass("btn-primary").text("<%= t('questions.monitor.unselect') %>");
                        flashInfoNotification(flashInfo, "<%= t('questions.monitor.selected') %>");
                        $("#selected-questions-cont").prepend(trgParentCont);
                    }
                    else {
                        trgBtn.addClass("btn-primary").removeClass("btn-info selected").text("<%= t('questions.monitor.select') %>");
                        flashInfoNotification(flashInfo, "<%= t('questions.monitor.unselected') %>");
                        $("#unselected-questions-cont").prepend(trgParentCont);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    writeError(flashInfo, jqXHR, textStatus, errorThrown);
                }
            })
            return false;
        }
       
               
        ModeratorLibrary.initMessageDialog = function () {
            var morningLessonCont = $( "#moderator-messages-cont" ).dialog({
                width: 700,
                autoOpen: false,
                resizable: false,
                height:500,
                modal: true,
                buttons: [{
                    text: "<%= t('send') %>",
                    "id": "btnOk",
                    click: function () {
                        ModeratorLibrary.sendModeratorMessages(this);
                    },
            
                }, {
                    text:  "<%= t('cancel') %>",
                    click: function () {
                        ModeratorLibrary.closeMessageDialog(this);
                    },
                }],
                close: function () {
                    ModeratorLibrary.resetMessageType();
                }
                
            })
            
            $( "#message-type" ).change(function() {
                ModeratorLibrary.messageTypeOnChange(this);
            });
        }
        
        
        ModeratorLibrary.closeMessageDialog = function (srcElm) {
            $(srcElm).dialog( "close" );
        }
        
        
        ModeratorLibrary.resetMessageType = function () {
            $("#message-type").val("0")
        }
        
        ModeratorLibrary.messageTypeOnChange = function (srcElm) {
            var value = $(srcElm).val();
            
            if (value != 0){
                $.ajax({
                    url: "/questions/" + value + "/moderator_messages"
                }).done(function(response) {
                    var htmlElement = $.parseHTML(response);
                    $("#moderator-messages-cont").html(htmlElement);
                });
                
                $("#moderator-messages-cont").dialog("open");
            }
        }
        
        ModeratorLibrary.sendModeratorMessages = function ( srcElm ) {
            $( "#moderator-messages-cont .moderator-message" ).each(function( index, element ) {
                var messageText = $(element).val();
                if (messageText){
                    $.ajax({
                        type: 'POST',
                        url: "/questions",
                        data: {"question": {"approved": "true", "name":"Moderator", "question": $(element).val()}},
                        dataType: 'json',
                        error: function (jqXHR, textStatus, errorThrown) {
                            writeError(null, jqXHR, textStatus, errorThrown);
                        }
                    })
                }
            });
            
            ModeratorLibrary.closeMessageDialog( srcElm );
        }
       
    }(ModeratorLibrary = ModeratorLibrary || {}));
    
    
    $( document ).ready(function() {
        ModeratorLibrary.createWebsocket();
        ModeratorLibrary.initUI();
    });

</script>

